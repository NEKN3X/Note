### This file was generated by Nexus Schema
### Do not make changes to this file directly

type BatchPayload {
  count: Int!
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  createOneNote(data: NoteCreateInput!): Note!
  createOneUser(data: UserCreateInput!): User!
  deleteManyNote(where: NoteWhereInput): BatchPayload!
  deleteOneNote(where: NoteWhereUniqueInput!): Note
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyNote(
    data: NoteUpdateManyMutationInput!
    where: NoteWhereInput
  ): BatchPayload!
  updateManyUser(
    data: UserUpdateManyMutationInput!
    where: UserWhereInput
  ): BatchPayload!
  updateOneNote(data: NoteUpdateInput!, where: NoteWhereUniqueInput!): Note
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Note {
  author: User!
  content: String!
  createdAt: DateTime!
  id: Int!
  title: String!
  updatedAt: DateTime!
}

input NoteCreateInput {
  author: UserCreateOneWithoutNotesInput!
  content: String!
  createdAt: DateTime
  title: String!
  updatedAt: DateTime
}

input NoteCreateManyWithoutAuthorInput {
  connect: [NoteWhereUniqueInput!]
  create: [NoteCreateWithoutAuthorInput!]
}

input NoteCreateWithoutAuthorInput {
  content: String!
  createdAt: DateTime
  title: String!
  updatedAt: DateTime
}

input NoteListRelationFilter {
  every: NoteWhereInput
  none: NoteWhereInput
  some: NoteWhereInput
}

input NoteScalarWhereInput {
  AND: [NoteScalarWhereInput!]
  authorId: IntFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [NoteScalarWhereInput!]
  OR: [NoteScalarWhereInput!]
  title: StringFilter
  updatedAt: DateTimeFilter
}

input NoteUpdateInput {
  author: UserUpdateOneRequiredWithoutNotesInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NoteUpdateManyDataInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NoteUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NoteUpdateManyWithoutAuthorInput {
  connect: [NoteWhereUniqueInput!]
  create: [NoteCreateWithoutAuthorInput!]
  delete: [NoteWhereUniqueInput!]
  deleteMany: [NoteScalarWhereInput!]
  disconnect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  update: [NoteUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [NoteUpdateManyWithWhereNestedInput!]
  upsert: [NoteUpsertWithWhereUniqueWithoutAuthorInput!]
}

input NoteUpdateManyWithWhereNestedInput {
  data: NoteUpdateManyDataInput!
  where: NoteScalarWhereInput!
}

input NoteUpdateWithoutAuthorDataInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NoteUpdateWithWhereUniqueWithoutAuthorInput {
  data: NoteUpdateWithoutAuthorDataInput!
  where: NoteWhereUniqueInput!
}

input NoteUpsertWithWhereUniqueWithoutAuthorInput {
  create: NoteCreateWithoutAuthorInput!
  update: NoteUpdateWithoutAuthorDataInput!
  where: NoteWhereUniqueInput!
}

input NoteWhereInput {
  AND: [NoteWhereInput!]
  author: UserWhereInput
  authorId: IntFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [NoteWhereInput!]
  OR: [NoteWhereInput!]
  title: StringFilter
  updatedAt: DateTimeFilter
}

input NoteWhereUniqueInput {
  id: Int
}

type Query {
  allNotes: [Note!]!
  allUsers: [User!]!
  note(where: NoteWhereUniqueInput!): Note
  notes(
    after: NoteWhereUniqueInput
    before: NoteWhereUniqueInput
    first: Int
    last: Int
  ): [Note!]!
  user(where: UserWhereUniqueInput!): User
  users(
    after: UserWhereUniqueInput
    before: UserWhereUniqueInput
    first: Int
    last: Int
  ): [User!]!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type User {
  id: Int!
  name: String!
  notes(
    after: NoteWhereUniqueInput
    before: NoteWhereUniqueInput
    first: Int
    last: Int
  ): [Note!]!
}

input UserCreateInput {
  createdAt: DateTime
  name: String!
  notes: NoteCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutNotesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutNotesInput
}

input UserCreateWithoutNotesInput {
  createdAt: DateTime
  name: String!
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  notes: NoteUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutNotesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutNotesInput
  update: UserUpdateWithoutNotesDataInput
  upsert: UserUpsertWithoutNotesInput
}

input UserUpdateWithoutNotesDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutNotesInput {
  create: UserCreateWithoutNotesInput!
  update: UserUpdateWithoutNotesDataInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  notes: NoteListRelationFilter
  OR: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: Int
}
